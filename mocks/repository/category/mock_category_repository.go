// Code generated by MockGen. DO NOT EDIT.
// Source: repository/category/category_repository_interface.go
//
// Generated by this command:
//
//	mockgen -source repository/category/category_repository_interface.go -destination mocks/repository/category/mock_category_repository.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/varomnrg/money-tracker/model"
	gomock "go.uber.org/mock/gomock"
)

// MockICategoryRepository is a mock of ICategoryRepository interface.
type MockICategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryRepositoryMockRecorder
}

// MockICategoryRepositoryMockRecorder is the mock recorder for MockICategoryRepository.
type MockICategoryRepositoryMockRecorder struct {
	mock *MockICategoryRepository
}

// NewMockICategoryRepository creates a new mock instance.
func NewMockICategoryRepository(ctrl *gomock.Controller) *MockICategoryRepository {
	mock := &MockICategoryRepository{ctrl: ctrl}
	mock.recorder = &MockICategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryRepository) EXPECT() *MockICategoryRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockICategoryRepository) CreateCategory(category model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockICategoryRepositoryMockRecorder) CreateCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockICategoryRepository)(nil).CreateCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockICategoryRepository) DeleteCategory(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockICategoryRepositoryMockRecorder) DeleteCategory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockICategoryRepository)(nil).DeleteCategory), id)
}

// GetCategories mocks base method.
func (m *MockICategoryRepository) GetCategories() ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockICategoryRepositoryMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockICategoryRepository)(nil).GetCategories))
}

// GetCategory mocks base method.
func (m *MockICategoryRepository) GetCategory(id string) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", id)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockICategoryRepositoryMockRecorder) GetCategory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockICategoryRepository)(nil).GetCategory), id)
}

// GetUserCategories mocks base method.
func (m *MockICategoryRepository) GetUserCategories(userID string) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCategories", userID)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCategories indicates an expected call of GetUserCategories.
func (mr *MockICategoryRepositoryMockRecorder) GetUserCategories(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCategories", reflect.TypeOf((*MockICategoryRepository)(nil).GetUserCategories), userID)
}

// IsUserCategoryExist mocks base method.
func (m *MockICategoryRepository) IsUserCategoryExist(userID, categoryName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserCategoryExist", userID, categoryName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserCategoryExist indicates an expected call of IsUserCategoryExist.
func (mr *MockICategoryRepositoryMockRecorder) IsUserCategoryExist(userID, categoryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserCategoryExist", reflect.TypeOf((*MockICategoryRepository)(nil).IsUserCategoryExist), userID, categoryName)
}
